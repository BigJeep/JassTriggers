/* WIP WIP WIP
recreating the GetNearest as the previous one wouldn't let me pick multiple types
this one might be a little more extensive as I plan to make multiple different 
Filters, but I think it will pay off. Plus I can simply create a new filter as
needed
But I'll leave the filters in a different file... later
to-do:

	0 not
	1 is
	2 regardless

	call GetNearestUnit 	(x, y, radius, player, /*structure, hero, air, ground, summoned, undead, resistant, immune)
	call GetNearestAlly		(x, y, radius, player, 
	call GetNearestEnemy	(x, y, radius, player,



	04#    boolean structure 
	05#    boolean hero 
	06#    boolean air 
	07#    boolean ground 
	08#    boolean summoned 
	09#    boolean undead 
	10#    boolean resistant 
	11#    boolean immune 


	
*/



function GetNearestUnitByType takes real x, real y, real radius, player playerArg, boolean ally, boolean enemy, boolean structure, boolean hero, boolean air, boolean ground, boolean summoned, boolean undead, boolean resistant, boolean immune returns integer

		
		local unit temp
		local player p = playerArg
		local group g = CreateGroup()
		
		local real nearest = 0
		local real temp_distance
		
		local real temp_distanceX
		local real temp_distanceY
		
		local real temp_x
		local real temp_y
		
		local integer nearest_unit
		
		local boolean bool
    
    boolean ally
    boolean enemy 
    boolean structure 
    boolean hero 
    boolean air 
    boolean ground 
    boolean summoned 
    boolean undead 
    boolean resistant 
    boolean immune 
		
		call GroupEnumUnitsInRange (g, x, y, radius, null ) 
		
		
		
		loop
			set temp = FirstOfGroup(g)
			exitwhen temp == null
			
			set bool = FilterType(temp, p, ally, enemy, structure, hero, air, ground, summoned, undead, resistant, immune)
			
			if bool then

				set temp_x = GetUnitX(temp)
				set temp_y = GetUnitY(temp)

				set temp_distanceX = temp_x - x
				set temp_distanceY = temp_y - y

				set temp_distance = SquareRoot(temp_distanceX * temp_distanceX + temp_distanceY * temp_distanceY)

				if nearest == 0 or temp_distance < nearest then
					set nearest = temp_distance
					set nearest_unit = GetUnitUserData(temp)
				endif
			endif
			call GroupRemoveUnit(g, temp)
		endloop
		
		call DestroyGroup(g)
		
		set temp = null
		set g = null
		set p = null
		
		return nearest_unit
		
	endfunction
